
---------------------------------------------------------------------正则表达式Regular Expression
1、正则：让计算机能够读懂人类的规则，接收字符串（默认是区分大小写的，如果不区分大小写的话，在正则的最后加标识i）
例如：var = re = /a/i; / var re = new RegExp（‘a’,‘i’）；

正则表达式：建议采用简写（但是当正则需要传参的时候必须使用全称的写法）
var re = new RegExp（‘a’）；/var = re = /a/;

在双斜杠里写内容是正则独有的写法

2、正则表达式常用方法：

1)、test：正则去匹配字符串，如果匹配成功就返回真，否则就返回假；（从字符串中找正则中的内容）

test的写法：正则.test（str）;

转义字符：给某个字符前面加个反斜杠（\）,含义会改变

\s:空格
\S：非空格
\d：数字
\D：非数字
\w：字符（只代表字母、数字、下划线_）
\W：非字符

2)、search：正则去匹配字符串，如果匹配成功就返回成功的位置，否则就返回-1；

search的写法：字符串.search（正则）;

3)、match：正则去匹配字符串，如果匹配成功就返回匹配成功的数组，否则就返回null；

match的写法：字符串.match（正则）;

正则默认：正则匹配成功就会结束，不会继续匹配；如果想全部查找，就要给正则后面加标识g（全局匹配）

量词：匹配不确定的位置（+表示至少出现一次，放在元素后面）

4)、replace：正则去匹配字符串，匹配成功的字符会被替换新的字符串（敏感词过滤）

replace的写法：字符串.replace（正则,新的字符串）;

| 在正则中是或的意思，当要进行多次替换时可以用到|；

replace的第二个参数可以是字符串，也可以是一个回调函数(函数的第一个参数就是匹配成功的字符)


3、匹配子项：小括号（），（还有另外一个意思，分组操作）

1）把正则的整体叫（母亲），然后把左边第一个小括号里面的正则叫做这个第一个子项（母亲的第一个孩子）

第二个小括号就是第二个孩子

2）字符串.match（正则）;档match不加g的时候可以获取到子项的集合。例子如下：
var str = ‘abc’;
var re = /（a）（b）（c）/;
alert(str.match(re));  返回值为abc， a， b， c 

4、字符类：一组相似的元素或者字符（[]中括号整体代表一个字符）

1）、排除符号^：如果^写在[]里面的话，就代表排除的意思（写在外面还有其他意思，后面讲）

2）、范围：[a-z]表示从a到z的一个范围，必须先小后大

3）、任意字符（去除标签没听话明白，课堂提问）

5、转义字符：（\n表示换行）

.（点）：表示任意字符（\.表示真正的点）

\b表示独立的部分（起始，结束，空格）
\B表示非独立的部分

特殊字符想输出时，要用两个反斜杠才能输出

6、重复子项：（注意匹配重复的子项时有时必须是相同的数字或者字母）
\1：重复的第一个子项
\2：重复的第二个子项


7、





















JS面向对象 Object Oriented Programming

--------------------------------------------------------------------------------初级面向对象：

1、组成：方法和属性（判断方法：后面有括号就是方法，没括号就是属性）

方法：函数：过程、动态的（对象下面的函数叫对象的方法，比如push和sort）

属性：变量：静态（对象下面的变量叫对象的属性）


2、创建面向对象程序：

数组有自己的方法和属性，但是空对象没有方法和属性，我们可以给空对象添加方法和属性

3、工厂方式（封装函数）

重点理解this指向，先看在哪里调用，如果前面没其他东西，直接指向window，如果前面有东西，在哪里调用就指向谁

当new去调用一个函数，这个时候函数中的this就是创建出来的对象，而且函数的返回值就是this（也就是隐式返回）

new后面调用的函数叫构造函数

4、对象引用：

基本类型：赋值的时候只是值的复制（比较时只要值相同就是true）

对象类型：赋值不仅是值的复制，而且也是引用的传递（它会改变原有对象）（比较时值和引用都相同才是true）

5、原型：去改写对象下面公用的方法或属性，让公用的方法或属性在内存中只存在一份，目的是提高性能

原型：类似CSS中的class（优先级低，复用性高）

普通方法：类似css中的style（优先级高，但是不能复用）

原型-prototype：要写在构造函数的下面

6、面向对象写法与使用：

写法：
function 构造函数（形参）{
	this.属性 = 形参;
}
构造函数.原型.方法 = function（）{ };

使用：
var 对象1 = new 构造函数（实参）;
对象1.方法（）;

7、面向对象的编写原则：
1）、先写出普通的写法，然后改成面向对象写法

普通方法变型：
a、尽量不要出现函数嵌套函数
b、可以有全局变量
c、把onload中不是赋值的语句放到单独函数中

改成面向对象：
a、全局变量就是属性
b、函数就是方法
c、Onload中创建对象
d、改this指向问题


---------------------------------------------------------------------------高级面向对象：

1、在JS源码：系统对象也是基于原型的程序（尽量不要去修改或者添加系统对象下面的方法和属性）

2、